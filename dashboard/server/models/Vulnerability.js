/**
 * Vulnerability Model
 * Represents a vulnerability found in a scan
 */

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const VulnerabilitySchema = new Schema({
  scanId: {
    type: Schema.Types.ObjectId,
    ref: 'Scan',
    required: true
  },
  ruleId: {
    type: String,
    required: true
  },
  category: {
    type: String,
    required: true,
    enum: [
      'A01:2021 - Broken Access Control',
      'A02:2021 - Cryptographic Failures',
      'A03:2021 - Injection',
      'A04:2021 - Insecure Design',
      'A05:2021 - Security Misconfiguration',
      'A06:2021 - Vulnerable and Outdated Components',
      'A07:2021 - Identification and Authentication Failures',
      'A08:2021 - Software and Data Integrity Failures',
      'A09:2021 - Security Logging and Monitoring Failures',
      'A10:2021 - Server-Side Request Forgery'
    ]
  },
  title: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  severity: {
    type: String,
    required: true,
    enum: ['critical', 'high', 'medium', 'low', 'info']
  },
  location: {
    type: String,
    required: true
  },
  line: {
    type: Number,
    required: true
  },
  column: {
    type: Number
  },
  snippet: {
    type: String
  },
  remediation: {
    type: String
  },
  status: {
    type: String,
    enum: ['open', 'fixed', 'false-positive', 'ignored'],
    default: 'open'
  },
  assignedTo: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Index for faster queries
VulnerabilitySchema.index({ scanId: 1, ruleId: 1 });
VulnerabilitySchema.index({ category: 1 });
VulnerabilitySchema.index({ severity: 1 });
VulnerabilitySchema.index({ status: 1 });

// Virtual for getting the project this vulnerability belongs to
VulnerabilitySchema.virtual('project', {
  ref: 'Scan',
  localField: 'scanId',
  foreignField: '_id',
  justOne: true
});

// Method to get the short category code (e.g., "A01:2021")
VulnerabilitySchema.methods.getCategoryCode = function() {
  return this.category.split(' - ')[0];
};

module.exports = mongoose.model('Vulnerability', VulnerabilitySchema);