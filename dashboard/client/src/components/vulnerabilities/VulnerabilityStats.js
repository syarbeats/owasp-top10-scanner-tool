import React from 'react';
import {
  Grid,
  Paper,
  Typography,
  Box,
  LinearProgress,
  Tooltip
} from '@mui/material';

// Severity colors matching the table component
const severityColors = {
  critical: '#7B1FA2',
  high: '#C62828',
  medium: '#EF6C00',
  low: '#2E7D32',
  info: '#1976D2'
};

// Status colors matching the VulnerabilityStatusBadge
const statusColors = {
  open: '#D32F2F',
  fixed: '#2E7D32',
  'false-positive': '#757575',
  ignored: '#9E9E9E'
};

// Format stats data for display
const formatStatsData = (stats, type) => {
  if (!stats || !Array.isArray(stats)) return [];

  const colors = type === 'severity' ? severityColors : statusColors;
  
  return stats.map(stat => ({
    name: stat._id.charAt(0).toUpperCase() + stat._id.slice(1).replace(/-/g, ' '),
    count: stat.count,
    color: colors[stat._id] || '#757575'
  })).sort((a, b) => b.count - a.count);
};

const StatCard = ({ title, stats, colorMap }) => {
  const total = stats.reduce((sum, { count }) => sum + count, 0);

  return (
    <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
      <Typography variant="h6" gutterBottom>
        {title}
      </Typography>
      {stats.length > 0 ? (
        stats.map(({ name, count, color }) => {
          const percentage = total > 0 ? (count / total) * 100 : 0;
          return (
            <Box key={name} sx={{ my: 1 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
                <Typography variant="body2">{name}</Typography>
                <Typography variant="body2">
                  {count} ({percentage.toFixed(1)}%)
                </Typography>
              </Box>
              <Tooltip title={`${count} vulnerabilities`}>
                <LinearProgress
                  variant="determinate"
                  value={percentage}
                  sx={{
                    height: 8,
                    borderRadius: 4,
                    backgroundColor: 'rgba(0, 0, 0, 0.1)',
                    '& .MuiLinearProgress-bar': {
                      backgroundColor: color,
                      borderRadius: 4
                    }
                  }}
                />
              </Tooltip>
            </Box>
          );
        })
      ) : (
        <Typography variant="body2" color="textSecondary">
          No data available
        </Typography>
      )}
    </Paper>
  );
};

const VulnerabilityStats = ({ severityStats = [], statusStats = [], loading = false }) => {
  const formattedSeverityStats = formatStatsData(severityStats, 'severity');
  const formattedStatusStats = formatStatsData(statusStats, 'status');

  const totalVulnerabilities = formattedSeverityStats.reduce((sum, { count }) => sum + count, 0);

  return (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h5" gutterBottom>
          Overview
          {loading && ' (Loading...)'}
        </Typography>
        <Typography variant="body1" color="textSecondary" gutterBottom>
          {totalVulnerabilities} total vulnerabilities found
        </Typography>
      </Grid>
      <Grid item xs={12} md={6}>
        <StatCard
          title="Vulnerabilities by Severity"
          stats={formattedSeverityStats}
        />
      </Grid>
      <Grid item xs={12} md={6}>
        <StatCard
          title="Vulnerabilities by Status"
          stats={formattedStatusStats}
        />
      </Grid>
    </Grid>
  );
};

export default VulnerabilityStats;