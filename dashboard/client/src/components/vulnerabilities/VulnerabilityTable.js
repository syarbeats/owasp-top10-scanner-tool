import React, { useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Paper,
  Chip,
  IconButton,
  Menu,
  MenuItem,
  Box,
  Typography
} from '@mui/material';
import {
  MoreVert as MoreVertIcon,
  ArrowUpward as ArrowUpwardIcon,
  ArrowDownward as ArrowDownwardIcon
} from '@mui/icons-material';
import { formatDistance } from 'date-fns';
import VulnerabilityStatusBadge from './VulnerabilityStatusBadge';

// Severity colors
const severityColors = {
  critical: '#7B1FA2',
  high: '#C62828',
  medium: '#EF6C00',
  low: '#2E7D32',
  info: '#1976D2'
};

const VulnerabilityTable = ({
  vulnerabilities,
  onStatusChange,
  onSort,
  sortBy,
  sortDirection,
  page,
  rowsPerPage,
  onPageChange,
  onRowsPerPageChange,
  totalCount,
  loading,
  showProject = false
}) => {
  const [actionMenuAnchor, setActionMenuAnchor] = useState(null);
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);

  const handleActionClick = (event, vulnerability) => {
    setActionMenuAnchor(event.currentTarget);
    setSelectedVulnerability(vulnerability);
  };

  const handleActionClose = () => {
    setActionMenuAnchor(null);
    setSelectedVulnerability(null);
  };

  const handleStatusChange = (status) => {
    if (selectedVulnerability && onStatusChange) {
      onStatusChange(selectedVulnerability._id, status);
    }
    handleActionClose();
  };

  const handleSortClick = (column) => {
    const isAsc = sortBy === column && sortDirection === 'asc';
    onSort(column, isAsc ? 'desc' : 'asc');
  };

  const renderSortIcon = (column) => {
    if (sortBy !== column) return null;
    return sortDirection === 'asc' ? <ArrowUpwardIcon fontSize="small" /> : <ArrowDownwardIcon fontSize="small" />;
  };

  return (
    <Paper elevation={2}>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell onClick={() => handleSortClick('severity')} style={{ cursor: 'pointer' }}>
                <Box display="flex" alignItems="center">
                  Severity {renderSortIcon('severity')}
                </Box>
              </TableCell>
              <TableCell onClick={() => handleSortClick('category')} style={{ cursor: 'pointer' }}>
                <Box display="flex" alignItems="center">
                  Category {renderSortIcon('category')}
                </Box>
              </TableCell>
              {showProject && (
                <TableCell onClick={() => handleSortClick('projectName')} style={{ cursor: 'pointer' }}>
                  <Box display="flex" alignItems="center">
                    Project {renderSortIcon('projectName')}
                  </Box>
                </TableCell>
              )}
              <TableCell onClick={() => handleSortClick('description')} style={{ cursor: 'pointer' }}>
                <Box display="flex" alignItems="center">
                  Description {renderSortIcon('description')}
                </Box>
              </TableCell>
              <TableCell onClick={() => handleSortClick('status')} style={{ cursor: 'pointer' }}>
                <Box display="flex" alignItems="center">
                  Status {renderSortIcon('status')}
                </Box>
              </TableCell>
              <TableCell onClick={() => handleSortClick('createdAt')} style={{ cursor: 'pointer' }}>
                <Box display="flex" alignItems="center">
                  Found {renderSortIcon('createdAt')}
                </Box>
              </TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell colSpan={showProject ? 7 : 6} align="center">
                  <Typography>Loading...</Typography>
                </TableCell>
              </TableRow>
            ) : vulnerabilities.length === 0 ? (
              <TableRow>
                <TableCell colSpan={showProject ? 7 : 6} align="center">
                  <Typography>No vulnerabilities found</Typography>
                </TableCell>
              </TableRow>
            ) : (
              vulnerabilities.map((vulnerability) => (
                <TableRow key={vulnerability._id}>
                  <TableCell>
                    <Chip
                      label={vulnerability.severity.toUpperCase()}
                      style={{
                        backgroundColor: severityColors[vulnerability.severity],
                        color: 'white'
                      }}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>{vulnerability.category}</TableCell>
                  {showProject && (
                    <TableCell>{vulnerability.projectName}</TableCell>
                  )}
                  <TableCell>{vulnerability.description}</TableCell>
                  <TableCell>
                    <VulnerabilityStatusBadge status={vulnerability.status} />
                  </TableCell>
                  <TableCell>
                    {formatDistance(new Date(vulnerability.createdAt), new Date(), { addSuffix: true })}
                  </TableCell>
                  <TableCell>
                    <IconButton
                      size="small"
                      onClick={(e) => handleActionClick(e, vulnerability)}
                    >
                      <MoreVertIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        component="div"
        count={totalCount}
        page={page}
        onPageChange={onPageChange}
        rowsPerPage={rowsPerPage}
        onRowsPerPageChange={onRowsPerPageChange}
        rowsPerPageOptions={[10, 25, 50, 100]}
      />
      <Menu
        anchorEl={actionMenuAnchor}
        open={Boolean(actionMenuAnchor)}
        onClose={handleActionClose}
      >
        <MenuItem onClick={() => handleStatusChange('fixed')}>Mark as Fixed</MenuItem>
        <MenuItem onClick={() => handleStatusChange('false-positive')}>Mark as False Positive</MenuItem>
        <MenuItem onClick={() => handleStatusChange('ignored')}>Ignore</MenuItem>
      </Menu>
    </Paper>
  );
};

export default VulnerabilityTable;